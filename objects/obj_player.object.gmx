<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Physics Variables

// grav (number, constant) - Player gravity
grav = 0.5;

// spd (number, constant) - Player Horizontal Moving Speed
spd = 4;

// jspd (number, constant) - Jump Speed
jspd = 9;

// hspd (number, variable) - Horizontal Speed
hspd = 0;

// vspd (number, variable) - Vertical Speed
vspd = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Movement Variables

// Dash status

can_dash = false;
dash_first_pressed = false;
dash_direction = vk_right;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Toggle dash

can_dash = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Platform physics

var rkey = keyboard_check(vk_right) || keyboard_check(ord("D"));
var lkey = keyboard_check(vk_left) || keyboard_check(ord("A"));
var jkey = keyboard_check(vk_up) || keyboard_check(vk_space);

var rkey_pressed = keyboard_check_pressed(vk_right) || keyboard_check_pressed(ord("D"));
var lkey_pressed = keyboard_check_pressed(vk_left) || keyboard_check_pressed(ord("A"));

// Check for ground
if (place_meeting(x, y+1, obj_solid)) {
    vspd = 0;
    
    // Jumping
    if (jkey) {
         vspd = -jspd;
    }
} else {
    // Gravity
    if (vspd &lt; 10) {
        vspd += grav;
    }
}

// Moving right
if (rkey) {
    if (hspd &lt;= spd) {
        if (abs(hspd - spd) &lt; spd) {
            hspd = spd;
        } else {
            hspd += spd;
        }
    } else {
        hspd -= spd/5;
    }
}

if (rkey_pressed) {
    if (!can_dash) {
        can_dash = true;
        alarm[0] = 30;
        dash_direction = vk_right;
    } else if (can_dash &amp;&amp; dash_direction == vk_right) {
        hspd = 20;
        show_debug_message("AA");
        can_dash = false;
    }
}

// Moving left
if (lkey) {
    if (hspd &gt;= -spd) {
        if (abs(hspd + spd) &lt; spd) {
            hspd = -spd;
        } else {
            hspd -= spd;
        }
    } else {
        hspd += spd/5;
    }
}

if (lkey_pressed) {
    if (!can_dash) {
        can_dash = true;
        alarm[0] = 30;
        dash_direction = vk_left;
    } else if (can_dash &amp;&amp; dash_direction == vk_left) {
        hspd = -20;
        can_dash = false;
    }
}

show_debug_message(hspd);

// Check if player is not moving
if ((!rkey &amp;&amp; !lkey) || (rkey &amp;&amp; lkey)) {  
    if (hspd &gt; 0) {
        if (abs(hspd - spd/10) &lt; spd/10) {
            hspd = 0;
        } else {
            if (hspd &gt; spd) {
                hspd -= spd/5;
            } else {
                hspd -= spd/2;
            }
        }
    } else if (hspd &lt; 0) {
        if (abs(hspd + spd/10) &lt; spd/10) {
            hspd = 0;
        } else {
            if (hspd &lt; spd) {
                hspd += spd/5;
            } else {
                hspd += spd/2;
            }
        }
    } else {
        hspd = 0;
    }
}

// Horizontal collisions
// If the player is reaching a wall, x+1 until it reaches the edge
if (place_meeting(x+hspd, y, obj_solid)) {
    while(!place_meeting(x+sign(hspd), y, obj_solid)) {
        x += sign(hspd);
    }
    hspd = 0;
}

// Move horizontally
x += hspd;

// Vertical collisions
// If the player is reaching a wall, y+1 until it reaches the edge
if (place_meeting(x, y+vspd, obj_solid)) {
    while(!place_meeting(x, y+sign(vspd), obj_solid)) {
        y += sign(vspd);
    }
    vspd = 0;
}

// Move hertically
y += vspd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
